IS_NIXOS=$(test -f /etc/os-release && grep NAME\=NixOS /etc/os-release)
IS_MACOS=$(uname | grep Darwin)
IS_PERSONAL_LAPTOP=$(hostname | grep -E "COMP-C3GQV70DXV|hell")
export ZSH="$HOME/.oh-my-zsh"

if [[ $IS_MACOS ]]; then
    eval $(/opt/homebrew/bin/brew shellenv)
fi

ZSH_THEME="rkj-repos"
CASE_SENSITIVE="true"
HYPHEN_INSENSITIVE="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"

zstyle ':omz:update' mode auto      # update automatically without asking

export EDITOR=nvim
export GIT_SSL_NO_VERIFY=true
export ZSH_TMUX_AUTOSTART=true

alias pipu="pip install --upgrade --upgrade-strategy only-if-needed"

function ddtracepy-testrunner {
    docker run --network host --userns=host --rm -w /root/project -v $PWD/:/root/project \
        -v $HOME/git/emmettbutler/ansible/roles/linux_base/files/zshrc:/root/.zshrc \
        -it ghcr.io/datadog/dd-trace-py/testrunner:18436fd8b4646ba6ac195edaad9661f8ecd81ebc@sha256:b82c9f708ea971e6e174b6293357f6ad9b13c8f13c3a071dcf5c492efa82fa62 \
        bash -c "apt-get update && apt-get install -y zsh && wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | \
            zsh || true && git config --global --add safe.directory /root/project && pip install riot hatch && zsh -c 'export IN_DOCKER_SHELL=1; zsh -i'"
}

function zshssh {
    # TODO make this better
    # https://github.com/romkatv/dotfiles-public/blob/0c9998c34a2769543fa825cc851dfcac4b6a0fcb/bin/ssh.zsh
    ssh "$1" '
        sudo apt install -y zsh;
        rm -rf ~/.oh-my-zsh;
        sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)";
        echo "if test -t 1; then zsh -i; fi" > ~/.bashrc
    '
    scp $HOME/git/emmettbutler/ansible/roles/linux_base/files/zshrc "$1":/home/"$2"/.zshrc
    ssh "$1"
}

if [[ $IS_NIXOS ]]; then
    touch ~/.zshrc
    export NIX_BUILD_SHELL=nix-zshell

    function updateallflakes {
        for lockfile in $(find /home -name flake.lock 2>/dev/null)
        do
            sudo nix flake update $(dirname $lockfile) --experimental-features 'nix-command flakes'
        done
    }
    function rebuildandswitch {
        for lockfile in $(find /home -name flake.lock 2>/dev/null)
        do
            if [[ -f $(dirname $lockfile)/root-flake ]]
            then
                sudo nixos-rebuild switch --impure --verbose --flake $(dirname $lockfile)
            fi
        done
    }
    function update {
        updateallflakes
        rebuildandswitch
    }
else
    export PATH=$PATH:/sbin
    export PATH=$PATH:$HOME/opt/bin
    export PATH="$PYENV_ROOT/bin:$PATH"
    pythonUserBaseDir=$(python3 -m site --user-base);
    pythonUserBaseBinDir="$pythonUserBaseDir/bin"
    export PATH="$pythonUserBaseBinDir:$PATH"
    unset pythonUserBaseDir;
    unset pythonUserBaseBinDir;
    export PYENV_VIRTUALENV_DISABLE_PROMPT=1
    export PYENV_ROOT="$HOME/.pyenv"
    if [[ ! -n $IN_DOCKER_SHELL ]]; then
        if [[ ! -n $IS_MACOS ]]; then
            eval `keychain --eval --agents ssh id_ed25519`
        else
            ssh-add ~/.ssh/id_ed25519
        fi
    fi
    eval "$(pyenv init --path)"
    if command -v pyenv 1>/dev/null 2>&1; then
        eval "$(pyenv init -)"
        if [[ ! -n $IN_DOCKER_SHELL ]]; then
            eval "$(pyenv virtualenv-init -)"
        fi
    fi
    pyenv shell 3.10.9
    if [[ ! -n $IS_MACOS ]]; then
        source $ZSH/oh-my-zsh.sh
    fi
fi

if [[ -n "$IN_NIX_SHELL" || -n $IN_DOCKER_SHELL ]]; then
    plugins=(git)
    if [[ -n "$IN_DOCKER_SHELL" ]]; then
        HOST_ALIAS="docker container"
    fi
    if [[ -n "$IN_NIX_SHELL" ]]; then
        HOST_ALIAS="nix-shell"
    fi
    # copypasta from the rkj-repos zsh theme
    PROMPT=$'%{$fg_bold[blue]%}┌─[%{$fg_bold[green]%}%n%b%{$fg[black]%}@%{$fg[cyan]%}'${HOST_ALIAS}'%{$fg_bold[blue]%}]%{$reset_color%} - %{$fg_bold[blue]%}[%{$fg_bold[default]%}%~%{$fg_bold[blue]%}]%{$reset_color%} - %{$fg_bold[blue]%}[%b%{$fg[yellow]%}'%D{"%Y-%m-%d %I:%M:%S"}%b$'%{$fg_bold[blue]%}]
    %{$fg_bold[blue]%}└─[%{$fg_bold[magenta]%}%?$(retcode)%{$fg_bold[blue]%}] <$(mygit)$(hg_prompt_info)>%{$reset_color%} '
    PS2=$' \e[0;34m%}%B>%{\e[0m%}%b '
else
    if [[ -n $IS_PERSONAL_LAPTOP ]]; then
        plugins=(git tmux)
    else
        plugins=(git)
    fi
    if [[ ! -e "${HOME}/.zplug/init.zsh" ]]; then
        curl -sL --proto-redir -all,https \
            https://raw.githubusercontent.com/zplug/installer/master/installer.zsh \
            | zsh
    fi
    source "${HOME}/.zplug/init.zsh"

    zplug "zsh-users/zsh-autosuggestions"
    zplug "zsh-users/zsh-completions"
    zplug "zsh-users/zsh-history-substring-search"
    zplug "agkozak/zsh-z"

    if ! zplug check --verbose; then
        printf "Install? [y/N]: "
        if read -q; then
            echo; zplug install
        fi
    fi
    zplug load
    if [[ -n $IS_MACOS ]]; then
        source $ZSH/oh-my-zsh.sh
    fi
fi
